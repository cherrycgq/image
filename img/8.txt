#include<stdio.h>
#include<stdlib.h>
struct ListNode
{
    int val;
    struct ListNode *next;
};
struct ListNode* reverseList(struct ListNode *head)
{
    struct ListNode *p1,*p2,*p3;
    int i=1;
    p1=head;
    if(p1->next==NULL)/*链表长度为1时*/
    {
        return head;
    }
    p2=p1->next;
    if(p2->next==NULL)/*链表长度为2时*/
    {
        p2->next=p1;
        p1->next=NULL;
        return p2;
    }
    while(p2->next!=NULL)/*利用三指针进行倒序*/
    {
        p3=p2->next;
        if(i)
        {
            p1->next=NULL;
            i--;
        }
        p2->next=p1;
        p1=p2;
        p2=p3;
    }
    p2->next=p1;
    return p2;/*返回链表末端地址*/
}
struct ListNode *addTwoNumbers(struct ListNode *l1,struct ListNode *l2)
{
    struct ListNode *head,*p,*pp,*p1,*p2;
    int i=1,k=0;
    p1=l1;
    p2=l2;
    while(p1!=NULL&&p2!=NULL)/*按位读取两个链表并求和录入新链表直到其中一个读完*/
    {
        p=(struct ListNode*)malloc(sizeof(struct ListNode));
        p->val=(p1->val)+(p2->val)+k;
        if(p->val>=10)
        {
            k=1;
            p->val=p->val-10;
        }
        else
        {
            k=0;
        }
        if(i)
        {
            head=p;
            pp=p;
            i--;
        }
        else
        {
            pp->next=p;
            pp=p;
        }
        p1=p1->next;
        p2=p2->next;
    }
    while(p1!=NULL)/*若第一个链表还没读完则按位读取并录入新链表*/
    {
        p=(struct ListNode*)malloc(sizeof(struct ListNode));
        p->val=p1->val+k;
        if(p->val>=10)
        {
            k=1;
            p->val=p->val-10;
        }
        else
        {
            k=0;
        }
        pp->next=p;
        pp=p;
        p1=p1->next;
    }
    while(p2!=NULL)/*若第二个链表还没读完则按位读取并录入新链表*/
    {
        p=(struct ListNode*)malloc(sizeof(struct ListNode));
        p->val=p2->val+k;
        if(p->val>=10)
        {
            k=1;
            p->val=p->val-10;
        }
        else
        {
            k=0;
        }
        pp->next=p;
        pp=p;
        p2=p2->next;
    }
    if(p1==NULL&&p2==NULL&&k==1)/*若两个链表都读完且残留进位则新链表再添加一个元素录入1*/
    {
        p=(struct ListNode*)malloc(sizeof(struct ListNode));
        p->val=1;
        pp->next=p;
        pp=p;
    }
    p->next=NULL;
    return head;
}
int main()
{
    char c;
    struct ListNode *p1,*p2,*head1,*head2,*headadd;
    int i;
    i=1;
    printf("请输入两个链表相加\n");
    while(1)/*输入第一个链表*/
    {
        c=getchar();
        if(c==')') break;
        if(c<'0'||c>'9') continue;
        p2=(struct ListNode*)malloc(sizeof(struct ListNode));
        p2->val=c-'0';
        if(i)
        {
            head1=p2;
            p1=p2;
            i--;
        }
        else
        {
            p1->next=p2;
            p1=p2;
        }
    }
    p1->next=NULL;
    head1=reverseList(head1);/*进行倒序方便利用现有函数*/
    i=1;
    while(1)/*输入第二个链表*/
    {
        c=getchar();
        if(c==')') break;
        if(c<'0'||c>'9') continue;
        p2=(struct ListNode*)malloc(sizeof(struct ListNode));
        p2->val=c-'0';
        if(i)
        {
            head2=p2;
            p1=p2;
            i--;
        }
        else
        {
            p1->next=p2;
            p1=p2;
        }
    }
    p1->next=NULL;
    head2=reverseList(head2);/*进行倒序方便利用现有函数*/
    headadd=addTwoNumbers(head1,head2);/*执行求和函数构造新链表*/
    headadd=reverseList(headadd);/*执行倒序函数将新链表倒序*/
    printf("结果为\n");
    printf("%d",headadd->val);
    headadd=headadd->next;
    while(headadd!=NULL)/*输出结果*/
    {
        printf("->%d",headadd->val);
        headadd=headadd->next;
    }
    return 0;
}
